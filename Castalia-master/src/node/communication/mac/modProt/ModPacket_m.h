//
// Generated file, do not edit! Created by opp_msgc 4.5 from src/node/communication/mac/modProt/ModPacket.msg.
//

#ifndef _MODPACKET_M_H_
#define _MODPACKET_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0405
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "MacPacket_m.h"
// }}



/**
 * Class generated from <tt>src/node/communication/mac/modProt/ModPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet ModPacket extends MacPacket {
 * 	int ptype; 
 * 	int adst; 
 * 	int fdst = 5; 
 * 	int sourceX;
 * 	int sourceY; 
 * 	int destX;
 * 	int destY;
 * 	int myX;
 * 	int myY;
 * 
 * 	int slots;
 * 	double slot_info[10];
 * 	int node_id[10];
 * 
 * 
 * 	double sleep_time;
 * }
 * </pre>
 */
class ModPacket : public ::MacPacket
{
  protected:
    int ptype_var;
    int adst_var;
    int fdst_var;
    int sourceX_var;
    int sourceY_var;
    int destX_var;
    int destY_var;
    int myX_var;
    int myY_var;
    int slots_var;
    double slot_info_var[10];
    int node_id_var[10];
    double sleep_time_var;

  private:
    void copy(const ModPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ModPacket&);

  public:
    ModPacket(const char *name=NULL, int kind=0);
    ModPacket(const ModPacket& other);
    virtual ~ModPacket();
    ModPacket& operator=(const ModPacket& other);
    virtual ModPacket *dup() const {return new ModPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getPtype() const;
    virtual void setPtype(int ptype);
    virtual int getAdst() const;
    virtual void setAdst(int adst);
    virtual int getFdst() const;
    virtual void setFdst(int fdst);
    virtual int getSourceX() const;
    virtual void setSourceX(int sourceX);
    virtual int getSourceY() const;
    virtual void setSourceY(int sourceY);
    virtual int getDestX() const;
    virtual void setDestX(int destX);
    virtual int getDestY() const;
    virtual void setDestY(int destY);
    virtual int getMyX() const;
    virtual void setMyX(int myX);
    virtual int getMyY() const;
    virtual void setMyY(int myY);
    virtual int getSlots() const;
    virtual void setSlots(int slots);
    virtual unsigned int getSlot_infoArraySize() const;
    virtual double getSlot_info(unsigned int k) const;
    virtual void setSlot_info(unsigned int k, double slot_info);
    virtual unsigned int getNode_idArraySize() const;
    virtual int getNode_id(unsigned int k) const;
    virtual void setNode_id(unsigned int k, int node_id);
    virtual double getSleep_time() const;
    virtual void setSleep_time(double sleep_time);
};

inline void doPacking(cCommBuffer *b, ModPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ModPacket& obj) {obj.parsimUnpack(b);}


#endif // _MODPACKET_M_H_
